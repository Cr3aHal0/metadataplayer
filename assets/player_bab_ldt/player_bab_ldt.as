package  {		import flash.display.MovieClip;	import flash.display.StageScaleMode;		import bab.XMLInOut;	import bab.player.FlvPlayer;	import bab.player.events.EditEvent;	import flash.text.TextField;	import flash.display.StageAlign;	import flash.external.*;	import flash.system.Security;	import flash.events.Event;	import fl.video.VideoEvent;	import fl.video.VideoState;		public class player_bab_ldt extends MovieClip {				private var flashVars:Object;		private var xio:XMLInOut;		private var flvP1:FlvPlayer;		private var ar:Array;		private var t:TextField;				public function player_bab_ldt() {			// constructor code			Security.allowDomain("*");			Security.allowInsecureDomain("*");			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						// Fuck CS5 "new feature from built-in preloader" : loaderInfo.parameters is from parent.parent.loaderInfo.parameter			flashVars = new Object();			if(parent!=null){				if (parent.parent!=null) flashVars = parent.parent.loaderInfo.parameters;				else flashVars = parent.loaderInfo.parameters;			}			else flashVars = loaderInfo.parameters;			for(var param:Object in flashVars){				trace("    flashVars " + param + " : " + flashVars[param.toString()]);			}						var urlData:String = "../../test/integration/fichiers_bab/yeelen_bab.ldt";			//var urlData:String = "test/yeelen_bab.ldt";			if(flashVars["urlData"]!="" && flashVars["urlData"]!=null){				urlData = flashVars["urlData"];			}						trace("init w = " + this.width + ", s.w = " + stage.stageWidth + ", h = " + this.height + ", s.h = " + stage.stageHeight);			xio = new XMLInOut(this, urlData);								}				public function youCanStart():void{			trace("youCanStart");			ar = xio.getEditList1();			trace("youCanStart 2 = " + ar.length);			var urlSkin:String = "../../test/integration/fichiers_bab/SkinBoutABout.swf";			//var urlSkin:String = "";			if(flashVars["urlSkin"]!="" && flashVars["urlSkin"]!=null){				urlSkin = flashVars["urlSkin"];			}			flvP1 = new FlvPlayer(stage.stageWidth, stage.stageHeight, urlSkin, t = new TextField());			if(urlSkin!=null && urlSkin!=""){				flvP1.addEventListener(EditEvent.EDIT_CHANGEINSTRUCTION, youCanStartBab);			}			flvP1.addEventListener(EditEvent.EDIT_UPDATETC, onBabVideoProgress);			flvP1.addEventListener(VideoEvent.STATE_CHANGE, onBabStateChange);			addChild(flvP1);			t.text = "init s.w = " + stage.stageWidth + ", s.h = " + stage.stageHeight + ", ei.a = " + ExternalInterface.available;			t.textColor = 0xBBBBBB;			t.width = stage.stageWidth;			addChild(t);			// External interface management			try{				ExternalInterface.addCallback("playVideo", flvP1.playVideo);				ExternalInterface.addCallback("pauseVideo", flvP1.pauseVideo);				ExternalInterface.addCallback("getCurrentTime", flvP1.getCurrentTime);				ExternalInterface.addCallback("seekTo", flvP1.seekTo);				ExternalInterface.addCallback("isMuted", flvP1.isMuted);				ExternalInterface.addCallback("mute", flvP1.mute);				ExternalInterface.addCallback("unMute", flvP1.unMute);				ExternalInterface.addCallback("getVolume", flvP1.getVolume);				ExternalInterface.addCallback("setVolume", flvP1.setVolume);				ExternalInterface.addCallback("playInstruction", flvP1.playInstruction);			}			catch(e:*){				t.text = "ExternalInterface error catch e = " + e;				t.textColor = 0xFFFFFF;			}						ExternalInterface.call("onBabPlayerReady","cool");						if(urlSkin==null || urlSkin==""){				youCanStartBab();			}    		}		public function youCanStartBab(e:*=null):void{			flvP1.removeEventListener(EditEvent.EDIT_CHANGEINSTRUCTION, youCanStartBab);			flvP1.getEditList(ar[0], ar[1]);		}		private function onBabVideoProgress(e:EditEvent):void{			// e.tc arrives in milliseconds			ExternalInterface.call("onBabVideoProgress",{mediaTime:(Math.floor(e.tc)/1000)});		}		private function onBabStateChange(e:VideoEvent):void{			var s:Number;			// Embeddable adaptation : we limit the number of states			// States can be : loading, stopped, seeking (3), paused (2), buffering, playing (1).			switch(e.state){				case VideoState.SEEKING:					s = 3;					break;				case VideoState.PAUSED:					s = 2;					break;				case VideoState.PLAYING:					s = 1;					break;			}			if(!isNaN(s)){				ExternalInterface.call("onBabStateChange",s);			}		}	}	}